#include <iostream>
#include <vector>
#include <string>
#include <Windows.h>

using namespace std;

class Product {
protected:
    string name;
    double price;

public:
    Product(string name, double price) : name(name), price(price) {}

    virtual ~Product() = default;

    string getName() const { return name; }
    double getPrice() const { return price; }
    void setPrice(double newPrice) { price = newPrice; }

    virtual double getFinalPrice() const = 0;
};

class Discountable {
public:
    virtual ~Discountable() = default;
    virtual double applyDiscount(double price) const = 0;
};

class Book : public Product, public Discountable {
public:
    Book(string name, double price) : Product(name, price) {}

    double applyDiscount(double price) const override {
        return price * 0.9;                   // знижка 10 відсотків.
    }

    double getFinalPrice() const override {
        return applyDiscount(price);
    }
};

class Pen : public Product, public Discountable {
public:
    Pen(string name, double price) : Product(name, price) {}

    double applyDiscount(double price) const override {
        return (price > 5) ? price - 5 : price;    // фіксована снижка 5 грн.
    }

    double getFinalPrice() const override {
        return applyDiscount(price);
    }
};

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    vector<Product*> products = {
        new Book("Книга про природу", 100),
        new Book("Книга с++", 500),
        new Pen("Синя ручка", 10),
        new Pen("Червона ручка", 6)
    };

  
    for (const auto& product : products) {
        cout << "Продукт: " << product->getName() << endl;
        cout << "Базова ціна: " << product->getPrice() << endl;
        cout << "Фінальна ціна: " << product->getFinalPrice() << endl;
        cout << "--------------------------" << endl;
    }

   
    for (auto& product : products) {
        delete product;
    }

    return 0;
}
